// src/components/HourlyChart.js
import React, { useState, useEffect } from "react";
import { Bar } from "react-chartjs-2";
import { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title } from "chart.js";

ChartJS.register(BarElement, CategoryScale, LinearScale, Title);

const HourlyChart = () => {
  const todayDate = new Date();
  const [selectedDate, setSelectedDate] = useState(todayDate.toISOString().split("T")[0]);
  const [dayOfWeek, setDayOfWeek] = useState(getDayOfWeek(todayDate));
  const [chartData, setChartData] = useState(generateRandomData());

  function getDayOfWeek(date) {
    const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    return daysOfWeek[date.getDay()];
  }

  function generateRandomData() {
    return Array.from({ length: 24 }, () => Math.floor(Math.random() * 60));
  }

  useEffect(() => {
    const dateObj = new Date(selectedDate);
    setDayOfWeek(getDayOfWeek(dateObj));
    setChartData(generateRandomData());
  }, [selectedDate]);

  const handleDateChange = (event) => {
    setSelectedDate(event.target.value);
  };

  const handleTodayClick = () => {
    const today = new Date();
    setSelectedDate(today.toISOString().split("T")[0]);
  };

  const handlePreviousDay = () => {
    const date = new Date(selectedDate);
    date.setDate(date.getDate() - 1);
    setSelectedDate(date.toISOString().split("T")[0]);
  };

  const handleNextDay = () => {
    const date = new Date(selectedDate);
    date.setDate(date.getDate() + 1);
    setSelectedDate(date.toISOString().split("T")[0]);
  };

  const data = {
    labels: [
      "00:00 hrs", "01:00 hrs", "02:00 hrs", "03:00 hrs", "04:00 hrs",
      "05:00 hrs", "06:00 hrs", "07:00 hrs", "08:00 hrs", "09:00 hrs",
      "10:00 hrs", "11:00 hrs", "12:00 hrs", "13:00 hrs", "14:00 hrs",
      "15:00 hrs", "16:00 hrs", "17:00 hrs", "18:00 hrs", "19:00 hrs",
      "20:00 hrs", "21:00 hrs", "22:00 hrs", "23:00 hrs"
    ],
    datasets: [
      {
        label: "Minutes",
        data: chartData,
        backgroundColor: "rgba(99, 130, 255, 0.6)",
        borderColor: "rgba(99, 130, 255, 1)",
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        display: false,
      },
      title: {
        display: true,
        text: `Hourly Data for ${dayOfWeek}, ${selectedDate}`,
        color: "#5C4AC7",
        font: {
          size: 18,
        },
      },
    },
    scales: {
      x: {
        title: {
          display: true,
          text: "Hours",
        },
      },
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: "Minutes",
        },
        ticks: {
          stepSize: 5,
        },
      },
    },
  };

  return (
    <div style={{ width: "100%", padding: "20px", position: "relative" }}>
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}>
        
        {/* Left section for Hourly Wise icon and Today button */}
        <div style={{ display: "flex", flexDirection: "column", alignItems: "center" }}>
          {/* Hourly Wise Icon */}
          <div
            style={{
              display: "flex",
              alignItems: "center",
              color: "#5C4AC7",
              fontWeight: "bold",
              fontSize: "16px",
              textAlign: "center",
              marginBottom: "10px",
            }}
          >
            <div
              style={{
                width: "36px",
                height: "36px",
                marginRight: "8px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                backgroundColor: "#5C4AC7",
                borderRadius: "50%",
              }}
            >
              <svg viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" style={{ width: "100%", height: "100%" }}>
                <circle cx="18" cy="18" r="18" fill="#5C4AC7" />
                <path
                  d="M18 5a13 13 0 0 1 0 26 13 13 0 0 1 0-26"
                  fill="none"
                  stroke="white"
                  strokeWidth="2"
                  strokeLinecap="round"
                />
                <text x="18" y="21" textAnchor="middle" fontSize="10" fill="white" fontWeight="bold">24</text>
              </svg>
            </div>
            Hourly wise
          </div>

          {/* Today Button */}
          <button
            style={{
              backgroundColor: "#C9A0FF",
              padding: "10px 20px",
              borderRadius: "8px",
              color: "#fff",
              fontWeight: "bold",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
              cursor: "pointer",
            }}
            onClick={handleTodayClick}
          >
            {dayOfWeek} <br /> {selectedDate}
          </button>
        </div>

        {/* Right-aligned Date Picker */}
        <input
          type="date"
          value={selectedDate}
          onChange={handleDateChange}
          style={{
            padding: "10px",
            borderRadius: "8px",
            backgroundColor: "#C9A0FF",
            color: "white",
            border: "none",
            fontSize: "16px",
            cursor: "pointer",
            boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
          }}
        />
      </div>

      {/* Left Navigation Button */}
      <button
        onClick={handlePreviousDay}
        style={{
          position: "absolute",
          top: "50%",
          left: "0",
          transform: "translateY(-50%)",
          backgroundColor: "#7B68EE",
          color: "white",
          border: "none",
          borderRadius: "50%",
          width: "40px",
          height: "40px",
          fontSize: "20px",
          fontWeight: "bold",
          cursor: "pointer",
          boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
        }}
      >
        &lt;
      </button>

      {/* Right Navigation Button */}
      <button
        onClick={handleNextDay}
        style={{
          position: "absolute",
          top: "50%",
          right: "0",
          transform: "translateY(-50%)",
          backgroundColor: "#7B68EE",
          color: "white",
          border: "none",
          borderRadius: "50%",
          width: "40px",
          height: "40px",
          fontSize: "20px",
          fontWeight: "bold",
          cursor: "pointer",
          boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
        }}
      >
        &gt;
      </button>

      <Bar data={data} options={options} />
    </div>
  );
};

export default HourlyChart;
